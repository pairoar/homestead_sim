/*
 * event.h
 *
 */

#ifndef _HOMESTEAD_EVENT_H_
#define _HOMESTEAD_EVENT_H_


enum TaskStateType {
    TASK_ST_NONE = 0,			    // none
    TASK_ST_INIT,					// task init
    TASK_ST_WORKING,				// working
    TASK_ST_SHUTDOWN_WAIT_CNF,	    // waiting shutdown cnf
    TASK_ST_SHUTDOWN_IN_PROGRESS,	// waiting shutdown cnf
    TASK_ST_SHUTDOWN,				// maintenance
    TASK_ST_MAX,
};


/* Definition of Event Offset */
#define EVT_MAIN_TASK_OFFSET          0x0
#define EVT_WATCHDOG_TASK_OFFSET      0x100
#define EVT_LOG_TASK_OFFSET           0x200
#define EVT_POWER_TASK_OFFSET         0x300
#define EVT_PERI_TASK_OFFSET          0x400
#define EVT_ATC_TASK_OFFSET           0x500

/* TBD */
enum ErrorReasonType {
    REASON_NONE,
	REASON_CRIT_WATCHDOG_DIDNOT_REGIST,
    REASON_ERR_WATCHDOG_DIDNOT_RPT,
    REASON_ERR_OVERLOAD,
    REASON_ERR_INAPPROPRIATE_ACK,
    REASON_WARNING_ABUSE_STACK,
    REASON_WARNING_TOO_MUCH_LOG,

	REASON_CHARING_STATION_OFFSET  = 0x10,
	REASON_BOT_ATTAHCED,
	REASON_BOT_DETTACHED,
	REASON_FULLY_CHARGED,
	REASON_WAIT_FOR_DETACHED,

	REASON_NO_INPUT_VOLTAGE,
	REASON_OVER_VOLTAGE,
	REASON_UNDER_VOLTAG,

	REASON_NO_INPUT_CURRENT,
	REASON_OVER_CURRENT,

	REASON_UNDER_TEMPERATURE,		// with device type : PowerSupply, Point of Contact, MCU internal
	REASON_OVER_TEMPERATURE,

	REASON_BLE_AUTH_FAIL,
    REASON_MAX,
};

/* Definition of Events */
typedef enum {
    EVT_NONE = EVT_MAIN_TASK_OFFSET,

	EVT_STATUS_INF,			// general info. event, info, 0
	EVT_ERROR_INF,			// with reason. event, type, 0


	/* switch */
	EVT_MANUAL_SWITCH_PRESSED_INF,
	EVT_MANUAL_SWITCH_RELEASED_INF,
	EVT_DOCK_SWITCH_PRESSED_INF,
	EVT_DOCK_SWITCH_RELEASED_INF,
	EVT_HALL_PRESSED_INF,
	EVT_HALL_RELEASED_INF,

	/* attached/detached */
	EVT_BOT_ATTACHED_INF,
	EVT_BOT_DETACHED_INF,

	/* Power Supply(FET) */
	EVT_POWER_SUPPLY_ON_REQ,
	EVT_POWER_SUPPLY_OFF_REQ,

	/* temperature */
	EVT_OVER_TEMPERATURE_INF,
	EVT_UNDER_TEMPERATURE_INF,
	EVT_RETURN_TEMPERATURE_INF,

	/* voltage & current */
	EVT_NO_CURRENT_INPUT_INF,
	EVT_NO_VOLTAGE_INPUT_INF,
	EVT_OVER_VOLTAGE_INF,
	EVT_UNDER_VOLTAGE_INF,

    /* watchdog */
    EVT_WDOG_NONE = EVT_WATCHDOG_TASK_OFFSET,
	EVT_WDOG_SERVICE_REGISTERED_NOTI,
	EVT_WDOG_SERVICE_UNREGISTERED_NOTI,
    EVT_WDOG_STARTED_NOTI,
    EVT_WDOG_DOG_RPT_REQ,
    EVT_WDOG_RPT,
    EVT_WDOG_AUDIT_REQ,

    EVT_LOG_NONE = EVT_LOG_TASK_OFFSET,
    EVT_LOG_STARTED_NOTI,
    EVT_LOG_DOG_RPT_REQ,
    EVT_LOG_PRINT_REQ,
    EVT_LOG_OUT_REQ,
    EVT_LOG_CHECK_REQ,
    EVT_LOG_MAX,

    EVT_POWER_NONE = EVT_POWER_TASK_OFFSET,
	EVT_POWER_STARTED_INF,
    EVT_POWER_DOG_RPT,
    EVT_POWER_POLL_REQ,
	EVT_POWER_CHECK_CHARGEABLE_REQ,
	EVT_POWER_MONITOR_REQ,

	EVT_POWER_CHARGING_START_REQ,
	EVT_POWER_CHARGING_STARTED_INF,
	EVT_POWER_CHARING_STOP_REQ,
	EVT_POWER_CHARGING_STOPPED_INF,
	EVT_POWER_FULLY_CHARGED_INF,

    EVT_POWER_MAX,

    EVT_PERI_NONE = EVT_PERI_TASK_OFFSET,
    EVT_ADC_DOG_RPT_REQ,
	EVT_ADC_POLL_REQ,
	EVT_GPIO_POLL_REQ,

	EVT_ADC_INF,
	EVT_TSENS_INF,
	EVT_ADC_TEST_INF,
	EVT_ADC_TEMP_CONTACT_INF,
	EVT_ADC_TEMP_FET_INF,
	EVT_ADC_CURRENT_INF,
	EVT_ADC_MAX,

    EVT_ATC_NONE = EVT_ATC_TASK_OFFSET,
	EVT_ATC_DOG_RPT_REQ,
	EVT_ATC_CHECK_REQ,
    EVT_ATC_MAX,

    EVT_MAX,
    EVT_UNKNOWN = EVT_MAX,
} EventType;


enum {
    TIMER_NONE,
    TIMER_DEFINED,
    TIMER_WORKING,
    TIMER_STOPPED,
    TIMER_MAX,
};

#endif /* _HOMESTEAD_EVENT_H_ */
